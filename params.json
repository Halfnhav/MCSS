{"tagline":"Многослойная система организации CSS","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"MCSS","body":"# Многослойный CSS\r\n## Введение\r\nМногослойная система организации CSS основана на принципах [OOCSS](http://oocss.org/) и [БЭМ](http://bem.info/). Методология родилась и развивается в команде разработчиков [Одноклассники.ру](http://odnoklassniki.ru) и рекомендуется к использованию как основа для собственного свода правил и документаций.\r\n\r\nНесмотря на то, что **MCSS** изначально был создан для организации большого количества стилей, данная методология подходит и порталам среднего размера.\r\n\r\nДокументация будет постоянно обновляться и развиваться, в том числе и в сопровождении вспомогательных инструментов, которые будут анонсированы в ближайшее время.\r\n\r\n*С вопросами можно обращаться в раздел [Issues на Github](https://github.com/operatino/MCSS/issues) или по почте <r@rhr.me>.*\r\n\r\n### Общие принципы\r\nМетодология **MCSS** максимально абстрагирована и не акцентирует внимание на конкретном code style, организации файлов и обязательных инструментах для работы с ней.\r\n\r\nБлоки вёрстки делятся на модули, каждый из которых сам по себе независим, максимально абстрагирован от фиксированных размеров и имеет значение по умолчанию.\r\n\r\nВ свою очередь модули распределяются по слоям, каждый из которых имеет свой свод правил использования и взаимодействия с другими модулями.\r\n\r\n![image](http://operatino.github.com/MCSS/images/modules.jpg)\r\n\r\n### Расположение стилей\r\nСтили каждого модуля должны храниться рядом друг с другом, можно их выделять как в закомментированные секции, так и в отдельные файлы:\r\n\r\n    /* Module name\r\n    -------------------------------------------------- */\r\n\r\n    .module { … }\r\n\r\n    .module_list { … }\r\n      .module_list__modificator { … }\r\n\r\n    /* /Module name */\r\n\r\nСелекторы, модифицируемые каскадом, должны так же храниться рядом с родительским классом:\r\n\r\n\t/* Module name\r\n\t-------------------------------------------------- */\r\n\r\n\t.module { … }\r\n\r\n\t.module_list { … }\r\n\t\t.module_list .other-module { … }\r\n\r\n\t/* /Module name */\r\n\r\nИсключением могут быть только классы из слоя контекста:\r\n\r\n\t/* Module name\r\n\t-------------------------------------------------- */\r\n\r\n\t.module { … }\r\n\r\n\t.module_list { … }\r\n\t\t.touch .module_list { … }\r\n\t\t.ie9 .module_list { … }\r\n\r\n\t/* /Module name */\r\n\r\nТакая организация стилей упрощает дальнейший рефакторинг кода и позволяет непосвященному разработчику быстро разобраться во всех стилях модуля и быстро приступить к работе с ним.\r\n\r\nПри чистке кода просто избавляться от старых модулей и от всех его зависимостей.\r\n### Наименование классов\r\nНазвания классов формируются из ключевого слова / названия модуля, таким образом модуль под названием **.module_*** порождает другие связанные с ним классы и модификаторы.\r\n\r\nЧасти модуля разделяются одинарным подчёркиванием: **\"_\"**, а модификаторы двойным: **\"__\"**:\r\n\r\n\t/* Module name\r\n\t-------------------------------------------------- */\r\n\r\n\t.module { … }\r\n\r\n\t.module_list { … }\r\n\t\t.module_list__modificator { … }\r\n\r\n\t/* /Module name */\r\n\r\nМодификаторы могут использоваться в HTML только рядом с модифицируемым классом:\r\n\r\n\t<div class=\"module_list module_list__modificator\"></div>\r\n\r\nДля определения названия из нескольких слов используется дефис **\"-\"**:\r\n\r\n\t.big-module-name { … }\r\n\t.big-module-name_block { … }\r\n\r\n## Фундамент\r\nФундамент включает в себя ресеты и мало изменяемые стили, которые закладываются в основу вёрстки и применяются на все страницы.\r\n\r\nСтили фундамента, как и все ресеты, подключаются с самого начала, либо в отдельном файле, либо в начале единого CSS файла.\r\n\r\n## Компановка модулей\r\n\r\n![image](http://operatino.github.com/MCSS/images/layers.jpg)\r\n\r\n## Первый слой — базовый\r\nПервый слой — это портальный фреймворк, ядро интерфейса, которое состоит из наиболее переиспользуемых и абстрактных конструкций, например:\r\n\r\n* формы\r\n* кнопки\r\n* блоки навигации и пр.\r\n\r\nРазметка модулей первого слоя тесно завязана на общем стиле портала и на дизайнерских гайдлайнах. При работе над базовыми конструкциями рекомендуется тесная связь с дизайнерами, особенно в решении создания общепортальных стандартов.\r\n\r\nВнедряя методологию **MCSS** в рабочий проект, первое, с чего стоит начинать, создать базу переиспользуемых стандартов.\r\n\r\nКак часть первого слоя можно смело использовать такие популярные фреймворки, как [Bootstrap](http://twitter.github.com/bootstrap/), [960gs](http://960.gs/), [inuit.css](https://github.com/csswizardry/inuit.css) и пр.\r\n\r\n### Правила\r\nОсновное правило первого слоя — абстрактность как в названиях, так и в разметке:\r\n\r\n* Названия классов этого слоя не должны выглядеть чужеродно в любом месте на портале.\r\n* Блоки модуля должны иметь стиль по умолчанию, но должны оставаться простыми и легко модифицируемыми под задачи различных проектных модулей.\r\n\r\nСтили первого слоя могут быть модифицированы каскадом от 1-го и 2-го слоя. Это связано с правилом расположения смежных стилей в одном месте (см. пункт \"Расположение стилей\").\r\n\r\nЯдро (1-й слой) должно быть абстрагировано от модулей 2ого слоя, пример:\r\n\r\nCтандарт форм:\r\n\r\n\t.input-field { … }\r\n\t\t.input-field_text { … }\r\n\r\nВзаимодействия стандарта форм со стандартом кнопок - модифицирование каскадом от 1-ого слоя:\r\n\r\n\t.input-field { … }\r\n\t\t.input-field .button { … }\r\n\r\nВзаимодействие проектного модуля со стандартом во 2-м слое:\r\n\r\n\t.project-module { … }\r\n\t\t.project-module .input-field { … }\r\n\r\n**Модификация 2-го слоя, от 1-ого запрещена!** В такой ситуации слои смешиваются, вызывая беспорядок:\r\n\r\n\t\t.input-field .project-module { … }\r\n\r\nСтили подключаются сразу после фундамента, перед 2-м слоем, для поддержания низкого уровня приоритета по весу селекторов.\r\n\r\n### Преимущества\r\nПереиспользуемые, продуманные модули первого слоя позволяют сэкономить время на поддержке популярных конструкций, избавляя от необходимости поддерживать сразу несколько похожих модулей. Переиспользуемость также хорошо сказывается на итоговом размере CSS-файлов.\r\n\r\nИмея разработанную базу, легко на её основе создавать новые интерфейсы, большая часть которых состоит из стандартных элементов.\r\n\r\nНаработки стандартных конструкций можно переиспользовать из проекта в проект для ускорения разработки вёрстки и завязанного на ней бэкэнд функционала.\r\n\r\n## Второй слой — проектный\r\nВторой слой включает в себя изолированные, проектные модули, из которых в дальнейшем собирается страница:\r\n\r\n* форма регистрации\r\n* блок логина\r\n* корзина товаров\r\n\r\n### Правила\r\n\r\nВ конструкциях второго слоя рекомендуется использовать как можно больше уникальных классов, даже если в конкретном дизайне блок не нуждается в стилизации, лучше заранее присвоить ему уникальный класс. Такой подход улучшает доступность каждой отдельной части конструкции, что в дальнейшем позволит легко изменять стили, не трогая HTML-конструкцию.\r\n\r\nКаждый модуль должен быть максимально изолирован и существовать как отдельная, независимая единица портала, которая общается только с ядром / базовым слоем.\r\n\r\nЧтобы в проектном модуле использовать конструкцию из первого слоя, нужно просто добавить рядом CSS-класс:\r\n\r\n\t<header class=\"toolbar\">\r\n\t\t<a href=\"/\" class=\"toolbar_logo\"></a>\r\n\t\t<menu class=\"toolbar_dropdown_ul umenu\">\r\n\t\t\t<li class=\"umenu_li\"></li>\r\n\t\t\t<li class=\"umenu_li\"></li>\r\n\t\t</menu>\r\n\t</header>\r\n\r\nВ примере описан модуль второго слоя **.toolbar**, который использует стандарт первого слоя **.umenu**. Чтобы модифицировать стандарт под проектные нужды, используется каскад в CSS:\r\n\r\n\t/* Toolbar\r\n\t-------------------------------------------------- */\r\n\r\n\t.toolbar { … }\r\n\r\n\t.toolbar_dropdown_ul { … }\r\n\t\t.toolbar_dropdown_ul .umenu_li { … }\r\n\r\n\t/* /Toolbar */\r\n\r\n**Стили второго слоя могут быть модифицированы каскадом только от других модулей второго слоя.**\r\n\r\nМожно:\r\n\r\n\t.project-module .other-project-module { … }\r\n\r\n**Нельзя:**\r\n\r\n\t.standard-module .project-module { … }\r\n\r\n### Преимущества\r\nИзолированность модулей позволяет легко работать с их стилями, не боясь задеть отдельные части портала. Работая в команде, каждый может взяться за разработку отдельного модуля, не мешая другим разработчикам.\r\n\r\nСтили каждого модуля можно подключать по отдельности только на те страницы, где они необходимы.\r\n\r\nЕсли какой-то функционал исчезнет с портала, избавиться от стилей будет очень просто: достаточно лишь избавиться от файла или от секции с его стилями.\r\n\r\n## Третий слой — косметический\r\nТретий слой состоит из простых, мало влияющих стилей:\r\n\r\n* цвета ссылок\r\n* низкоуровневый OOCSS — пара свойств на класс (.font-size_XL, .margin-t_L)\r\n* глобальные модификаторы\r\n\r\nСлой может не существовать в некоторых вариациях использования методологии, но на больших проектах стили этого слоя позволяют решить проблему с дубликацией стилей и позволяют описывать редкие, непроектные ситуации, не плодя лишнюю разметку.\r\n\r\n### Правила\r\nСтили третьего слоя должны быть построены так, чтобы при их удалении вёрстка не ломалась. Максимум могут теряться какие-то незначительные стили — цвета, отступы и пр.\r\n\r\nПозволяется использовать простые OOCSS-классы, не больше трёх на блок, для редких, не проектных ситуаций:\r\n\r\n\t<div class=\"font-size_XL margin-t_L color_red\"></div>\r\n\r\n**Стили косметического слоя нельзя модифицировать каскадом от других слоёв, кроме контекста.**\r\n\r\nКосметические стили подключаются в самом конце, так же допускается использовать **!important**.\r\n\r\n### Преимущества\r\nСтиль мало влияет на общую вёрстку портала, при этом решая проблемы дублированного кода и избавляя от необходимости плодить маленькие проектные и базовые модули.\r\n\r\nПростые селекторы позволяют быстро справляться с редкими случаями, когда нужно повесить всего пару свойств на не проектный модуль.\r\n\r\n## Контекст\r\nСлой включает в себя стили высшего контекста и @media-правила, которые могут использоваться для изменения стандартных стилей под особенности различного контекста:\r\n\r\n* .ie8, .ie9 — браузеры\r\n* .touch — особенности устройства\r\n* .logged-in — высший контекст в рамках портала\r\n* Media queries\r\n\r\nСлой контекста является исключением в правиле \"Расположение стилей\". Стили этого слоя располагаются по всем слоям, рядом с селекторами, которые каскадом модифицируются от контекста.\r\n\r\n\t/* Module name\r\n\t-------------------------------------------------- */\r\n\r\n\t.module { … }\r\n\r\n\t.module_list { … }\r\n\t\t.touch .module_list { … }\r\n\t\t.ie9 .module_list { … }\r\n\r\n\t@media screen and (max-width: 1000px) {\r\n\t\t.module { … }\r\n\t\t}\r\n\r\n\t/* /Module name */\r\n\r\n## Примеры использования\r\n\r\nПосмотреть взаимодействие слоёв на практике можно на [этой странице](http://operatino.github.com/MCSS/examples/layers). В примере, все слои поделены на секции в одном [CSS файле](http://operatino.github.com/MCSS/examples/layers/css/style.css), таким же образом можно делить содержание секций на отдельные файлы:\r\n\r\n![image](http://operatino.github.com/MCSS/images/file-system.png)\r\n\r\nВо [втором примере](http://operatino.github.com/MCSS/examples/mcss_with_bootstrap), изображено взаимодействие MCSS с [Bootstrap](http://twitter.github.com/bootstrap/), в качестве первого (базового) слоя.\r\n\r\n## Рекомендации\r\n\r\n### Code style\r\nВместе с методологией советуем использовать следующие полезные практики для улучшения своего кода:\r\n\r\n* [Google HTML/CSS style guide](http://google-styleguide.googlecode.com/svn/trunk/htmlcssguide.xml) - стайл гайд по оформлению HTML/CSS кода\r\n* [CSScomb](http://csscomb.ru/) - инструмент для сортировки CSS-свойств в рамках селектора\r\n* [CSSDoc](http://cssdoc.net/) - правила оформления комментариев в CSS ([описание](http://habrahabr.ru/post/87406/))\r\n\r\n### Словарь сокращений\r\nЧто бы не раздувать названия классов, используется словарь популярных сокращений:\r\n\r\n\ti — item\r\n\ttx — text\r\n\tit — input text\r\n\tico — icon\r\n\tt — title\r\n\tf — footer\r\n\th — header\r\n\tcol — column\r\n\tcnt — content\r\n\timg — image\r\n\ta — link\r\n\tac — action\r\n\tusr — user\r\n\te — error\r\n\r\nВ будущем будет доступен в более развёрнутом виде.\r\n\r\n### Best practices\r\n* Как можно больше комментируйте CSS, любые нестандартные свойства, конструкции, магические числа — это пригодится не только членам вашей команды, но и вам, когда вы через пару месяцев вернётесь к коду.\r\n\r\n###  Ссылки\r\n* [Презентация MCSS](http://rhr.me/pres/mcss/) c Web Standards Days\r\n* [Модель строгости в MCSS](http://tohtml.it/post/34285787881/mcss-unstrict-mode)\r\n\r\n## Будущее MCSS\r\n* Перевод документации на английский язык\r\n* Модульное развитие спецификации\r\n* Видео запись презентации MCSS c [Web Standards Days](http://webstandardsdays.ru)\r\n* Среда разработки прототипов и документаций вёрстки\r\n\r\nСледите за обновлениями в твиттере [@operatino](http://twitter.com/operatino)","google":"UA-31907551-2"}